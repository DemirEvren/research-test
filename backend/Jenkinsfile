pipeline {
    agent any

    environment {
        TEST_IMAGE = 'backend-test'  // Temporary test image
        DB_CONTAINER = 'mysql-test-db'  // Database for testing
        DB_NAME = 'testdb'
        DB_USER = 'root'
        DB_PASS = 'password'
        AWS_BASTION = 'ec2-user@54.164.238.221' //frontend for test purposes   // Bastion server changes because we dont have an elastic IP yet
        AWS_BACKEND = 'ec2-user@23.21.143.245' // Internal Private IP of the backend server
        BACKEND_SSH_KEY = '/home/ec2-user/.keys/backend-key.pem' // Path to key for the backend on bastion host
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/DemirEvren/research-test.git'
            }
        }
        
    stage('Cleanup Old Containers') {
        steps {
            // sh 'docker stop test-mysql || true'
            // sh 'docker rm test-mysql || true'
            sh 'docker stop test-backend || true' 
            sh 'docker rm test-backend || true' 
            
            }
        }

        stage('Build Test Image') {
            steps {
                dir('backend') {
                    sh 'docker build -t ${TEST_IMAGE} .'
                }
            }
        }

 stage('Start Containers & Wait for MySQL') {
    steps {
        script {
            sh """
            echo "Ensuring MySQL is running..."
            if [ ! "\$(docker ps -q -f name=test-mysql)" ]; then
                echo "Starting MySQL container..."
                docker start test-mysql 2>/dev/null || docker-compose -f backend/compose-jenkins.test.yml up -d mysql
            else
                echo "✅ MySQL is already running."
            fi

            echo "Waiting for MySQL to be ready..."
            for i in {1..15}; do
                if docker exec test-mysql mysqladmin ping -h localhost --silent; then
                    echo "✅ MySQL is ready!"
                    break
                fi
                echo "⏳ Waiting for MySQL..."
                sleep 5
            done


            echo "Starting backend container..."
            docker-compose -f backend/compose-jenkins.test.yml up -d backend
            """
        }
    }
}



stage('Run Tests in Docker') {
    steps {
        script {
            sh """
            echo "Wachten Op de backend "
            sleep 15

            echo "Running tests inside the container..."
            docker exec -i test-backend sh -c '
                cd /usr/src/app &&
                export TEST_MODE=true &&
                echo "TEST_MODE is set to: \$TEST_MODE" &&
                npm test --verbose
            ' || exit 1
            """
        }
    }
}


        stage('Archive Backend Files') {
            steps {
                sh '''
                tar -czf backend.tar.gz backend/
                '''
        archiveArtifacts artifacts: 'backend.tar.gz', fingerprint: true

    }
}
 stage('Deploy to AWS via Bastion') {
            steps { 
                sshagent(['bastion-ssh-key']) {  //  Securely loads the key from Jenkins credentials
                    
                    sh """
                        scp -o StrictHostKeyChecking=no backend.tar.gz ${AWS_BASTION}:/home/ec2-user/
                        
                        ssh -o StrictHostKeyChecking=no ${AWS_BASTION} "
                            scp -i ${BACKEND_SSH_KEY} /home/ec2-user/backend.tar.gz ${AWS_BACKEND}:/home/ec2-user/
                            ssh -t -o StrictHostKeyChecking=no -i ${BACKEND_SSH_KEY} ${AWS_BACKEND} '/home/ec2-user/deploy_backend.sh'
                        "
                    """



                }
            }
        }
    }

   post {
    always {
        //sh 'docker system prune -af'  // Remove unused Docker resources
         echo "Saving logs before cleanup..."
            sh 'docker logs test-backend > backend-logs.txt || echo "No logs found, container may have been removed"'
            archiveArtifacts artifacts: 'backend-logs.txt', fingerprint: true

            echo "Cleaning up old images and networks, but keeping containers..."
            // sh 'docker system prune --all --volumes --filter "until=24h" || true'

        cleanWs()  //  Clean Jenkins workspace
        }
    }

}
