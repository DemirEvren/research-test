pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'backend-app'  // Final production image
        TEST_IMAGE = 'backend-test'  // Temporary test image
        DB_CONTAINER = 'mysql-test-db'  // Database for testing
        DB_NAME = 'testdb'
        DB_USER = 'root'
        DB_PASS = 'password'
        AWS_HOST = 'your-ec2-instance'  // Replace with your AWS instance
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/DemirEvren/research-test.git'
            }
        }
        
    stage('Cleanup Old Containers') {
        steps {
            sh 'docker stop mysql-test-db || true'
            sh 'docker rm mysql-test-db || true'
            sh 'docker stop test-mysql || true'
            sh 'docker rm test-mysql || true'
            // sh 'docker stop test-backend || true' 
            // sh 'docker rm test-backend || true' 
            
            }
        }

        stage('Build Test Image') {
            steps {
                dir('backend') {
                    sh 'docker build -t ${TEST_IMAGE} .'
                }
            }
        }

stage('Run Tests in Docker') {
    steps {
        script {
            sh '''
            echo "🚀 Starting test containers..."
            docker-compose -f backend/compose-jenkins.test.yml up -d

            echo "⏳ Waiting for backend to start..."
            sleep 10

            echo "🐳 Running containers:"
            docker ps

            echo "📜 Backend logs before running tests:"
            docker logs test-backend || echo "⚠️ No logs available"

            echo "🚀 Running tests..."
            docker exec test-backend /bin/sh -c '
                export TEST_MODE=true
                echo "🔍 TEST_MODE is set to: $TEST_MODE"
                npm test -- --verbose || echo "❌ Tests failed"
            '

            echo "📜 Backend logs after running tests:"
            docker logs test-backend || echo "⚠️ No logs available"

            echo "🧹 Stopping test containers..."
            docker-compose -f backend/compose-jenkins.test.yml down || echo "⚠️ Cleanup failed"
            '''
        }
    }
}


//       stage('Run Tests in Docker') {
//     steps {
//         script {
//             sh '''
//             # Start backend and MySQL container for tests
//             docker-compose -f backend/compose-jenkins.test.yml up -d

//             # Wait for backend to start
//             sleep 10

//             # Debugging: Check running containers
//             docker ps

//             # Debugging: Check backend logs
//             docker logs test-backend

//             # 🚀 Run tests with TEST_MODE inside backend container
//             docker exec test-backend /bin/sh -c 'export TEST_MODE=true && npm test -- --verbose || echo "❌ Tests failed"'


//             # Stop and remove test containers after tests
//             docker-compose -f backend/compose-jenkins.test.yml down
//             '''
//         }
//     }
// }





        stage('Build Production Image') {
            steps {
                dir('backend') {
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                }
            }
        }

        // stage('Deploy to AWS') {
        //     steps {
        //         sshagent(['ec2-ssh-key']) {
        //             sh '''
        //             docker save ${DOCKER_IMAGE} | ssh ec2-user@${AWS_HOST} 'docker load'
        //             ssh ec2-user@${AWS_HOST} 'docker run -d -p 8090:8090 --name backend ${DOCKER_IMAGE}'
        //             '''
        //         }
        //     }
        // }
    }

   post {
    always {
        // sh 'docker system prune -af'  // ✅ Remove unused Docker resources
        cleanWs()  // ✅ Clean Jenkins workspace
        }
    }

}
