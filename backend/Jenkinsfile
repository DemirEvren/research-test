pipeline {
    agent any

    environment {
        TEST_IMAGE = 'backend-test'  // Temporary test image
        DB_CONTAINER = 'mysql-test-db'  // Database for testing
        DB_NAME = 'testdb'
        DB_USER = 'root'
        DB_PASS = 'password'
        AWS_BASTION = 'ubuntu@18.234.157.93' //frontend for test purposes   // Bastion server changes because we dont have an elastic IP yet
        AWS_BACKEND = 'ubuntu@10.0.2.26' // Internal Private IP of the backend server
        //BACKEND_SSH_KEY = '/home/ec2-user/.keys/backend-key.pem' // Path to key for the backend on bastion host
        BACKEND_SSH_KEY = '/home/ubuntu/keys/backend-key-pair.pem '
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/DemirEvren/research-test.git'
            }
        }
        
    stage('Cleanup Old Containers') {
        steps {
            sh 'docker stop test-mysql || true'
            sh 'docker rm test-mysql || true'
            sh 'docker stop test-backend || true' 
            sh 'docker rm test-backend || true' 
            
            }
        }

        stage('Build Test Image') {
            steps {
                dir('backend') {
                    sh 'docker build -t ${TEST_IMAGE} .'
                }
            }
        }

stage('Run Tests in Docker') {
    steps {
        script {
            sh """
            echo "containers starten met compose file"
            docker-compose -f backend/compose-jenkins.test.yml up -d
            
            echo "Wachten Op de backend "
            sleep 15
            
            echo "Running tests..."
            docker exec test-backend sh -c \"
                export TEST_MODE=true
                echo 'TEST_MODE is set to: \$TEST_MODE'
                npm test --verbose
            \" || exit 1
            """
        }
    }
}

        stage('Archive Backend Files') {
            steps {
                sh '''
                tar -czf backend.tar.gz backend/
                '''
        archiveArtifacts artifacts: 'backend.tar.gz', fingerprint: true

    }
}
 stage('Deploy to AWS via Bastion') {
            steps { 
                sshagent(['backend-ssh-key']) {  //  Securely loads the key from Jenkins credentials
                    // sh '''
                    // 

                    // '''
                    sh """                    
                        scp -o StrictHostKeyChecking=no backend.tar.gz ${AWS_BASTION}:/home/ubuntu/
                        ssh -o StrictHostKeyChecking=no ${AWS_BASTION} "
                            scp -i ${BACKEND_SSH_KEY} /home/ubuntu/backend.tar.gz ${AWS_BACKEND}:/home/ubuntu/ && 
                        ssh -o StrictHostKeyChecking=no -i ${BACKEND_SSH_KEY} ${AWS_BACKEND} \"
                            echo 'Stopping backend...' && 
                            pkill npm && pkill node && 
                            echo 'Extracting files on Backend Server...' && 
                            tar -xzf /home/ubuntu/backend.tar.gz -C /home/ubuntu/ && 
                            echo 'Installing dependencies...' && 
                            cd /home/ubuntu/backend && npm install && 
                            echo 'Restarting backend at \$(date)' >> /home/ubuntu/backend.restarted.log && 
                            nohup npm start >> /home/ubuntu/backend.log 2>&1 &\"
                            "
                        """

                }
            }
        }
    }

   post {
    always {
        sh 'docker system prune -af'  // Remove unused Docker resources
        cleanWs()  //  Clean Jenkins workspace
        }
    }

}
